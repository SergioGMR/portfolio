---
import { buttonVariants } from '@/components/ui/button'

const esFlag = '/flags/es.webp'
const enFlag = '/flags/en.webp'
---

<button
  id="language-toggle"
  class={buttonVariants({ variant: 'ghost' })}
  type="button"
  aria-label="Toggle language"
>
  <span id="language-toggle-icon" class="text-xl leading-none">ðŸ‡ªðŸ‡¸</span>
  <span class="sr-only">Toggle language</span>
</button>

<script is:inline>
  const FLAG_IMAGES = {
    es: { src: esFlag, alt: 'EspaÃ±ol' },
    en: { src: enFlag, alt: 'English' },
  }

  const TOGGLE_ID = 'language-toggle'
  const ICON_ID = 'language-toggle-icon'

  const getIconElement = () => document.getElementById(ICON_ID)
  const getButtonElement = () => document.getElementById(TOGGLE_ID)

  const getStoredLanguage = () =>
    window.portfolioLanguage?.getLanguage?.() ||
    localStorage.getItem('language') ||
    'es'

  const renderIcon = (language, isWindows) => {
    const icon = getIconElement()
    if (!icon) return

    if (isWindows) {
      const { src, alt } = FLAG_IMAGES[language] || FLAG_IMAGES.es
      icon.innerHTML = ''
      const image = document.createElement('img')
      image.src = src
      image.alt = alt
      image.className = 'h-[1.2rem] w-7 rounded'
      icon.appendChild(image)
    } else {
      icon.textContent = language === 'es' ? 'ðŸ‡ªðŸ‡¸' : 'ðŸ‡¬ðŸ‡§'
    }
  }

  if (typeof window !== 'undefined') {
    let initialized = false
    let isWindows = false

    const applyLanguage = language => {
      renderIcon(language, isWindows)
      const button = getButtonElement()
      if (button) {
        button.dataset.language = language
      }
    }

    const toggleLanguage = () => {
      const current = getStoredLanguage()
      const next = current === 'es' ? 'en' : 'es'

      if (window.portfolioLanguage?.setLanguage) {
        window.portfolioLanguage.setLanguage(next)
      } else {
        localStorage.setItem('language', next)
        window.dispatchEvent(
          new CustomEvent('languageChange', { detail: { language: next } }),
        )
      }

      applyLanguage(next)
    }

    const handleLanguageChange = event => {
      const language = event?.detail?.language || getStoredLanguage()
      applyLanguage(language)
    }

    const cleanup = () => {
      if (!initialized) return
      const button = getButtonElement()
      if (button) {
        button.removeEventListener('click', toggleLanguage)
      }
      window.removeEventListener('languageChange', handleLanguageChange)
      initialized = false
    }

    const setup = () => {
      const button = getButtonElement()
      if (!button) return

      cleanup()

      isWindows = window.navigator.platform.toLowerCase().includes('win')

      button.addEventListener('click', toggleLanguage)
      window.addEventListener('languageChange', handleLanguageChange)
      initialized = true

      applyLanguage(getStoredLanguage())
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setup, { once: true })
    } else {
      setup()
    }

    document.addEventListener('astro:after-swap', setup)
    document.addEventListener('astro:before-swap', cleanup)
  }
</script>
